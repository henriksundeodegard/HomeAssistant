blueprint:
  name: Universal Hue Dimmer Control
  description: Control various functions of a Dimmer
  domain: automation
  input:
    dimmer_device:
      name: Dimmer Remote
      description: The Dimmer Device that triggers the automation
      selector:
        device:
          multiple: false
          entity:
            - device_class: button
          filter:
            - integration: hue
    light_devices:
      name: Lights to control
      description: The Light Devices to control
      selector:
        device:
          multiple: true
          entity:
            - domain: light
          filter:
            - integration: hue
    scene_entities:
      name: Scenes to cycle
      description: List of scenes to activate when pressing the fourth button on the dimmer remote. The scenes are selected based on the current counter value. The counter value is incremented by 1 each time the button is pressed, and loops back to start, creating a cycling effect.
      selector:
        entity:
          multiple: true
          filter:
            - integration: hue
              domain: scene
    scene_counter:
      name: Global Scene Cycling Counter Variable
      description: Global counter variable to keep track of the scene state. This should be a Counter Helper created under "Devices and Services".
      selector:
        entity:
          multiple: false
          filter:
            - domain: counter

trigger:
  # First button, initial press
  - device_id: !input dimmer_device
    domain: hue
    platform: device
    type: initial_press
    subtype: 1
    id: Button1_InitialPress

  # Second button, initial press
  - device_id: !input dimmer_device
    domain: hue
    platform: device
    type: initial_press
    subtype: 2
    id: Button2_InitialPress

  # Second button, long press
  - device_id: !input dimmer_device
    domain: hue
    platform: device
    type: repeat
    subtype: 2
    id: Button2_LongPress

  # Third button, initial press
  - device_id: !input dimmer_device
    domain: hue
    platform: device
    type: initial_press
    subtype: 3
    id: Button3_InitialPress

  # Third button, long press
  - device_id: !input dimmer_device
    domain: hue
    platform: device
    type: repeat
    subtype: 3
    id: Button3_LongPress

  # Fourth button, initial press
  - device_id: !input dimmer_device
    domain: hue
    platform: device
    type: initial_press
    subtype: 4
    id: Button4_InitialPress

action:
  - variables:
      scene_entities: !input scene_entities
      scene_counter: !input scene_counter

  - alias: "Actions for each trigger"
    choose:
      - alias: "First button, initial press, toggle lights"
        conditions:
          - condition: trigger
            id:
              - Button1_InitialPress
        sequence:
          - repeat:
              for_each: !input light_devices
              sequence:
                - alias: "Toggle light"
                  service: light.toggle
                  data: {}
                  target:
                    device_id: "{{ repeat.item }}"
          - service: counter.reset
            data: {}
            target:
              entity_id: !input scene_counter

      - alias: "Second button, initial press, increase brightness"
        conditions:
          - condition: trigger
            id:
              - Button2_InitialPress
        sequence:
          - repeat:
              for_each: !input light_devices
              sequence:
                - alias: "Increase brightness"
                  service: light.turn_on
                  data:
                    brightness_step_pct: 20
                  target:
                    device_id: "{{ repeat.item }}"
          - service: counter.reset
            data: {}
            target:
              entity_id: !input scene_counter

      - alias: "Second button, long press, increase brightness continuously"
        conditions:
          - condition: trigger
            id:
              - Button2_LongPress
        sequence:
          - repeat:
              for_each: !input light_devices
              sequence:
                - alias: "Increase brightness"
                  service: light.turn_on
                  data:
                    brightness_step_pct: 20
                  target:
                    device_id: "{{ repeat.item }}"
          - service: counter.reset
            data: {}
            target:
              entity_id: !input scene_counter

      - alias: "Third button, initial press, decrease brightness"
        conditions:
          - condition: trigger
            id:
              - Button3_InitialPress
        sequence:
          - repeat:
              for_each: !input light_devices
              sequence:
                - alias: "Decrease brightness"
                  service: light.turn_on
                  data:
                    brightness_step_pct: -20
                  target:
                    device_id: "{{ repeat.item }}"
          - service: counter.reset
            data: {}
            target:
              entity_id: !input scene_counter

      - alias: "Third button, long press, decrease brightness continuously"
        conditions:
          - condition: trigger
            id:
              - Button3_LongPress
        sequence:
          - repeat:
              for_each: !input light_devices
              sequence:
                - alias: "Decrease brightness"
                  service: light.turn_on
                  data:
                    brightness_step_pct: -20
                  target:
                    device_id: "{{ repeat.item }}"
          - service: counter.reset
            data: {}
            target:
              entity_id: !input scene_counter

      - alias: "Fourth button, initial press, activate scenes"
        conditions:
          - condition: trigger
            id:
              - Button4_InitialPress
        sequence:
          - if:
              - alias: "If the scene counter is larger than the number of scenes"
                condition: template
                value_template: "{{ (states(scene_counter) | int) >= (scene_entities | length) }}"
            then:
              - alias: "Reset the counter to 0"
                service: counter.reset
                data: {}
                target:
                  entity_id: !input scene_counter

          - alias: "Increment counter to select next scene"
            service: counter.increment
            data: {}
            target:
              entity_id: !input scene_counter

          - alias: "Activate scene based on counter value"
            repeat:
              count: "{{ scene_entities | length }}"
              sequence:
                if:
                  - alias: "If current scene counter value matches the repeat index"
                    condition: template
                    value_template: "{{ (states(scene_counter) | int) == (repeat.index) }}"
                then:
                  - alias: "Activate the scene"
                    service: scene.turn_on
                    target:
                      entity_id: "{{ scene_entities[repeat.index - 1] }}"
                    metadata: {}
mode: single
